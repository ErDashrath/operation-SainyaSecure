# Generated by Django 5.2.6 on 2025-09-14 00:41

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blockchain', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommandCenter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='COMMAND_CENTER', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('current_mode', models.CharField(choices=[('normal', 'Normal Mode'), ('offline', 'Offline Mode'), ('resync', 'Resync Mode')], default='normal', max_length=10)),
                ('master_ledger_hash', models.CharField(blank=True, max_length=64)),
                ('global_lamport_clock', models.PositiveIntegerField(default=0)),
                ('last_resync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=50, unique=True)),
                ('device_type', models.CharField(choices=[('mobile', 'Mobile Unit'), ('base', 'Base Station'), ('satellite', 'Satellite'), ('command', 'Command Center')], max_length=20)),
                ('is_authorized', models.BooleanField(default=False)),
                ('is_online', models.BooleanField(default=True)),
                ('clearance_level', models.PositiveIntegerField(default=1)),
                ('last_sync', models.DateTimeField(auto_now=True)),
                ('local_ledger_count', models.PositiveIntegerField(default=0)),
                ('local_lamport_clock', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ModeChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_mode', models.CharField(choices=[('normal', 'Normal Mode'), ('offline', 'Offline Mode'), ('resync', 'Resync Mode')], max_length=10)),
                ('new_mode', models.CharField(choices=[('normal', 'Normal Mode'), ('offline', 'Offline Mode'), ('resync', 'Resync Mode')], max_length=10)),
                ('changed_by', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MasterLedger',
            fields=[
                ('tx_hash', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('message_hash', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('lamport_clock', models.PositiveIntegerField()),
                ('mode_when_created', models.CharField(choices=[('normal', 'Normal Mode'), ('offline', 'Offline Mode'), ('resync', 'Resync Mode')], default='normal', max_length=10)),
                ('is_resync', models.BooleanField(default=False)),
                ('local_ledger_hash', models.CharField(blank=True, max_length=64)),
                ('block_hash', models.CharField(blank=True, max_length=64)),
                ('from_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to='blockchain.device')),
                ('to_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to='blockchain.device')),
            ],
            options={
                'ordering': ['lamport_clock', 'timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ResyncSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=64, unique=True)),
                ('local_entries_count', models.PositiveIntegerField()),
                ('merged_entries_count', models.PositiveIntegerField()),
                ('conflicts_count', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blockchain.device')),
            ],
        ),
        migrations.CreateModel(
            name='LocalLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tx_hash', models.CharField(max_length=64)),
                ('from_device_id', models.CharField(max_length=50)),
                ('to_device_id', models.CharField(max_length=50)),
                ('message_hash', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField()),
                ('local_lamport_clock', models.PositiveIntegerField()),
                ('is_synced', models.BooleanField(default=False)),
                ('created_offline', models.BooleanField(default=True)),
                ('sync_timestamp', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blockchain.device')),
            ],
            options={
                'ordering': ['local_lamport_clock', 'timestamp'],
                'unique_together': {('device', 'tx_hash')},
            },
        ),
    ]
